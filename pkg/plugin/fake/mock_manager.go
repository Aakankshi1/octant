// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/octant/pkg/plugin (interfaces: ManagerInterface)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"

	plugin "github.com/vmware-tanzu/octant/pkg/plugin"
	store "github.com/vmware-tanzu/octant/pkg/store"
	component "github.com/vmware-tanzu/octant/pkg/view/component"
)

// MockManagerInterface is a mock of ManagerInterface interface
type MockManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagerInterfaceMockRecorder
}

// MockManagerInterfaceMockRecorder is the mock recorder for MockManagerInterface
type MockManagerInterfaceMockRecorder struct {
	mock *MockManagerInterface
}

// NewMockManagerInterface creates a new mock instance
func NewMockManagerInterface(ctrl *gomock.Controller) *MockManagerInterface {
	mock := &MockManagerInterface{ctrl: ctrl}
	mock.recorder = &MockManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagerInterface) EXPECT() *MockManagerInterfaceMockRecorder {
	return m.recorder
}

// ObjectStatus mocks base method
func (m *MockManagerInterface) ObjectStatus(arg0 context.Context, arg1 runtime.Object) (*plugin.ObjectStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStatus", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ObjectStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStatus indicates an expected call of ObjectStatus
func (mr *MockManagerInterfaceMockRecorder) ObjectStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStatus", reflect.TypeOf((*MockManagerInterface)(nil).ObjectStatus), arg0, arg1)
}

// Print mocks base method
func (m *MockManagerInterface) Print(arg0 context.Context, arg1 runtime.Object) (*plugin.PrintResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Print", arg0, arg1)
	ret0, _ := ret[0].(*plugin.PrintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Print indicates an expected call of Print
func (mr *MockManagerInterfaceMockRecorder) Print(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockManagerInterface)(nil).Print), arg0, arg1)
}

// Store mocks base method
func (m *MockManagerInterface) Store() plugin.ManagerStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store")
	ret0, _ := ret[0].(plugin.ManagerStore)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockManagerInterfaceMockRecorder) Store() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockManagerInterface)(nil).Store))
}

// Tabs mocks base method
func (m *MockManagerInterface) Tabs(arg0 context.Context, arg1 runtime.Object) ([]component.Tab, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tabs", arg0, arg1)
	ret0, _ := ret[0].([]component.Tab)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tabs indicates an expected call of Tabs
func (mr *MockManagerInterfaceMockRecorder) Tabs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tabs", reflect.TypeOf((*MockManagerInterface)(nil).Tabs), arg0, arg1)
}

// UpdateObjectStore mocks base method
func (m *MockManagerInterface) UpdateObjectStore(arg0 store.Store) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateObjectStore", arg0)
}

// UpdateObjectStore indicates an expected call of UpdateObjectStore
func (mr *MockManagerInterfaceMockRecorder) UpdateObjectStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateObjectStore", reflect.TypeOf((*MockManagerInterface)(nil).UpdateObjectStore), arg0)
}
